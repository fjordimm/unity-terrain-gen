
// Most code copied directly from https://www.youtube.com/watch?v=DeATXF4Szqo

#pragma kernel Main

#pragma warning (disable : 3571)

#include "NMGGrassBladeComputeHelpers.hlsl"

#define MAX_BLADE_SEGMENTS 5
#define MAX_BLADE_POINTS (MAX_BLADE_SEGMENTS * 2 + 1)

struct SourceVertex
{
    float3 positionOS;
};

StructuredBuffer<SourceVertex> _SourceVertices;
StructuredBuffer<int> _SourceTriangles;

struct DrawVertex
{
    float3 positionWS;
    float height;
};

struct DrawTriangle
{
    float3 lightingNormalWS;
    DrawVertex vertices[3];
};

AppendStructuredBuffer<DrawTriangle> _DrawTriangles;

struct IndirectArgs
{
    uint numVerticesPerInstance;
    uint numInstances;
    uint startVertexIndex;
    uint startInstanceIndex;
};

RWStructuredBuffer<IndirectArgs> _IndirectArgsBuffer;

int _NumSourceTriangles;
int _MaxBladeSegments;
float _MaxBendAngle;
float _BladeCurvature;
float _BladeHeight;
float _BladeHeightVariance;
float _BladeWidth;
float _BladeWidthVariance;
float4x4 _LocalToWorld;

void GetCenterAndBasis(SourceVertex a, SourceVertex b, SourceVertex c, out float3 positionWS, out float3 normalWS, out float3x3 tsToWs)
{
    float3 positionA_WS = mul(_LocalToWorld, float4(a.positionOS, 1)).xyz;
    float3 positionB_WS = mul(_LocalToWorld, float4(b.positionOS, 1)).xyz;
    float3 positionC_WS = mul(_LocalToWorld, float4(c.positionOS, 1)).xyz;
    
    positionWS = GetTriangleCenter(positionA_WS, positionB_WS, positionC_WS);
    GetTriangleNormalAndTSToWSMatrix(positionA_WS, positionB_WS, positionC_WS, normalWS, tsToWs);
}

float2 GetBladeDimensions(float3 positionWS)
{
    float width = randNegative1to1(positionWS, 0) * _BladeWidthVariance + _BladeWidth;
    float height = randNegative1to1(positionWS, 1) * _BladeHeightVariance + _BladeHeight;
    return float2(width, height);
}

float3x3 FigureTransformationForHeight(float v, float3x3 twistMatrix, float3x3 tsToWs, float maxBend)
{
    float3x3 bendMatrix = AngleAxis3x3(maxBend * pow(v, _BladeCurvature), float3(1, 0, 0));
    return mul(tsToWs, mul(twistMatrix, bendMatrix));
}

DrawVertex SetupBladePoint(float3 anchorWS, float2 dimensions, float3x3 tsToWs, float2 uv)
{
    float3 offsetTS = float3((uv.x - 0.5f) * dimensions.x, 0, uv.y * dimensions.y);
    float3 offsetWS = mul(tsToWs, offsetTS);
    
    float3 positionWS = anchorWS + offsetWS;
    
    DrawVertex output = (DrawVertex) 0;
    output.positionWS = positionWS;
    output.height = uv.y;
    return output;
}

[numthreads(128, 1, 1)]
void Main(uint3 id : SV_DispatchThreadID)
{
    if ((int)id.x >= _NumSourceTriangles)
    {
        return;
    }
    
    int triStart = id.x * 3;
    float3 positionWS, normalWS;
    float3x3 tsToWs;
    GetCenterAndBasis(
        _SourceVertices[_SourceTriangles[triStart]],
        _SourceVertices[_SourceTriangles[triStart + 1]],
        _SourceVertices[_SourceTriangles[triStart + 2]],
        positionWS,
        normalWS,
        tsToWs
    );
    
    float2 dimensions = GetBladeDimensions(positionWS);
    float3x3 twistMatrix = AngleAxis3x3(rand(positionWS, 2) * 3.141592653589793238462643383279502884197 * 2, float3(0, 0, 1));
    float maxBend = rand(positionWS, 3) * 3.141592653589793238462643383279502884197 * 0.5f * _MaxBendAngle;
    float3x3 bendMatrix = AngleAxis3x3(maxBend, float3(1, 0, 0));
    
    int numBladeSegments = min(MAX_BLADE_SEGMENTS, max(1, _MaxBladeSegments));
    DrawVertex vertices[MAX_BLADE_POINTS];
    
    for (int i = 0; i < numBladeSegments; i++)
    {
        float v = i / (float)numBladeSegments;
        float u = 0.5 - (1 - v) * 0.5;
        float transform = FigureTransformationForHeight(v, twistMatrix, tsToWs, maxBend);
        
        vertices[i * 2] = SetupBladePoint(positionWS, dimensions, transform, float2(u, v));
        vertices[i * 2 + 1] = SetupBladePoint(positionWS, dimensions, transform, float2(1 - u, v));
    }
    
    float3x3 tipTransform = FigureTransformationForHeight(1, twistMatrix, tsToWs, maxBend);
    vertices[numBladeSegments * 2] = SetupBladePoint(positionWS, dimensions, tipTransform, float2(0.5, 1));
    
    int numTriangles = (numBladeSegments - 1) * 2 + 1;
    for (i = 0; i < numTriangles; i++)
    {
        DrawTriangle tri = (DrawTriangle)0;
        tri.lightingNormalWS = normalWS;
        tri.vertices[0] = vertices[i];
        tri.vertices[1] = vertices[i + 1];
        tri.vertices[2] = vertices[i + 2];
        _DrawTriangles.Append(tri);
    }
    
    InterlockedAdd(_IndirectArgsBuffer[0].numVerticesPerInstance, numTriangles * 3);
}