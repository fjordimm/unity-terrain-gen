
// Most code copied directly from https://www.youtube.com/watch?v=DeATXF4Szqo

#pragma kernel Main

#include "NMGGrassBladeComputeHelpers.hlsl"

struct SourceVertex
{
    float3 positionOS;
};

StructuredBuffer<SourceVertex> _SourceVertices;
StructuredBuffer<int> _SourceTriangles;

struct DrawVertex
{
    float3 positionWS;
    float height;
};

struct DrawTriangle
{
    float3 lightingNormalWS;
    DrawVertex vertices[3];
};

AppendStructuredBuffer<DrawTriangle> _DrawTriangles;

struct IndirectArgs
{
    uint numVerticesPerInstance;
    uint numInstances;
    uint startVertexIndex;
    uint startInstanceIndex;
};

RWStructuredBuffer<IndirectArgs> _IndirectArgsBuffer;

int _NumSourceTriangles;
float _BladeMultipleSpread;
uint _BladeMultipleAmount;
float _MaxBendAngle;
float _BladeHeight;
float _BladeHeightVariance;
float _BladeWidth;
float _BladeWidthVariance;
float _GrassEndSteepness;
float4x4 _LocalToWorld;

void GetCenterAndBasis(SourceVertex a, SourceVertex b, SourceVertex c, out float3 positionWS, out float3 normalWS, out float3x3 tsToWs)
{
    float3 positionA_WS = mul(_LocalToWorld, float4(a.positionOS, 1)).xyz;
    float3 positionB_WS = mul(_LocalToWorld, float4(b.positionOS, 1)).xyz;
    float3 positionC_WS = mul(_LocalToWorld, float4(c.positionOS, 1)).xyz;
    
    positionWS = GetTriangleCenter(positionA_WS, positionB_WS, positionC_WS);
    GetTriangleNormalAndTSToWSMatrix(positionA_WS, positionB_WS, positionC_WS, normalWS, tsToWs);
}

float2 GetBladeDimensions(float3 positionWS)
{
    float width = randNegative1to1(positionWS, 0) * _BladeWidthVariance + _BladeWidth;
    float height = randNegative1to1(positionWS, 1) * _BladeHeightVariance + _BladeHeight;
    return float2(width, height);
}

DrawVertex SetupBladePoint(float3 anchorWS, float2 dimensions, float3x3 tsToWs, float2 uv)
{
    float3 offsetTS = float3((uv.x - 0.5f) * dimensions.x, 0, uv.y * dimensions.y);
    float3 offsetWS = mul(tsToWs, offsetTS);
    
    float3 positionWS = anchorWS + offsetWS;
    
    DrawVertex output = (DrawVertex) 0;
    output.positionWS = positionWS;
    output.height = uv.y;
    return output;
}

[numthreads(128, 1, 1)]
void Main(uint3 id : SV_DispatchThreadID)
{
    if ((int)id.x >= _NumSourceTriangles)
    {
        return;
    }
    
    /*
    if (id.x != 4)
    {
        return;
    }
    */
    
    int triStart = id.x * 3;
    float3 positionWS, normalWS;
    float3x3 tsToWs;
    GetCenterAndBasis(
        _SourceVertices[_SourceTriangles[triStart]],
        _SourceVertices[_SourceTriangles[triStart + 1]],
        _SourceVertices[_SourceTriangles[triStart + 2]],
        positionWS,
        normalWS,
        tsToWs
    );
    
    uint numTriangles = _BladeMultipleAmount * _BladeMultipleAmount;
    if (normalWS.y > (1 - _GrassEndSteepness))
    {
        for (uint c = 0; c < _BladeMultipleAmount; c++)
        {
            for (uint r = 0; r < _BladeMultipleAmount; r++)
            {
                if (c + r < _BladeMultipleAmount)
                {
                    float3 posMultipleOffset = (float3) 0;
                
                    float spreadHalf = _BladeMultipleSpread / 4; // Half of the terrain ground square (so positionWS.x - spreadHalf is the left side of it)
                    float spreadSubdivLength = 4 * spreadHalf / (float) _BladeMultipleAmount;
                    posMultipleOffset.x += -spreadHalf + spreadSubdivLength * c;
                    posMultipleOffset.z += -spreadHalf + spreadSubdivLength * r;
            
                    float2 dimensions = GetBladeDimensions(posMultipleOffset);
                    float3x3 twistMatrix = AngleAxis3x3(rand(posMultipleOffset, 2) * 3.141592653589793238462643383279502884197 * 2, float3(0, 0, 1));
                    float maxBend = rand(posMultipleOffset, 3) * 3.141592653589793238462643383279502884197 * 0.5f * _MaxBendAngle;
                    float3x3 bendMatrix = AngleAxis3x3(maxBend, float3(1, 0, 0));

                    DrawVertex vertices[3];
    
                    float3x3 transform = mul(tsToWs, mul(twistMatrix, bendMatrix));
                    
                    vertices[0] = SetupBladePoint(posMultipleOffset, dimensions, transform, float2(0, 0));
                    vertices[1] = SetupBladePoint(posMultipleOffset, dimensions, transform, float2(1, 0));
                    vertices[2] = SetupBladePoint(posMultipleOffset, dimensions, transform, float2(0.5, 1));
                    
                    // if the triangle is the part of terrain facing positive z and positive x
                    // ..this inequality only works because in ChunkMeshGenerator, the first vertex of each triangle is the one at a right angle
                    if (_SourceVertices[_SourceTriangles[triStart]].positionOS.z > positionWS.z)
                    {
                        // rotate by 180
                        vertices[0].positionWS = mul(float3x3(-1, 0, 0, 0, 1, 0, 0, 0, -1), vertices[0].positionWS);
                        vertices[1].positionWS = mul(float3x3(-1, 0, 0, 0, 1, 0, 0, 0, -1), vertices[1].positionWS);
                        vertices[2].positionWS = mul(float3x3(-1, 0, 0, 0, 1, 0, 0, 0, -1), vertices[2].positionWS);
                        
                        // fix offset (1.375 = 1 + 1/4 + 1/8)
                        /*
                        vertices[0].positionWS.x += _BladeMultipleSpread * 1.375;
                        vertices[0].positionWS.z += _BladeMultipleSpread * 1.375;
                        vertices[1].positionWS.x += _BladeMultipleSpread * 1.375;
                        vertices[1].positionWS.z += _BladeMultipleSpread * 1.375;
                        vertices[2].positionWS.x += _BladeMultipleSpread * 1.375;
                        vertices[2].positionWS.z += _BladeMultipleSpread * 1.375;
                        */
                    }
                    
                    vertices[0].positionWS += positionWS;
                    vertices[1].positionWS += positionWS;
                    vertices[2].positionWS += positionWS;
    
                    DrawTriangle tri = (DrawTriangle) 0;
                    tri.lightingNormalWS = normalWS;
                    tri.vertices[0] = vertices[0];
                    tri.vertices[1] = vertices[1];
                    tri.vertices[2] = vertices[2];
        
                    _DrawTriangles.Append(tri);
                }
            }
        }
    }
    
    InterlockedAdd(_IndirectArgsBuffer[0].numVerticesPerInstance, numTriangles * 3);
}





/*
float3 posOffset = positionWS;
if (i == 0)
{
posOffset.x -= 0.25 * _BladeMultipleSpread;
posOffset.z -= 0.25 * _BladeMultipleSpread;
}
else if (i == 1)
{
posOffset.x += 0.25 * _BladeMultipleSpread;
posOffset.z -= 0.25 * _BladeMultipleSpread;
}
else if (i == 2)
{
posOffset.x -= 0.25 * _BladeMultipleSpread;
posOffset.z += 0.25 * _BladeMultipleSpread;
}
else if (i == 3)
{
posOffset.x += 0.25 * _BladeMultipleSpread;
posOffset.z += 0.25 * _BladeMultipleSpread;
}
*/